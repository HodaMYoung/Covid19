"""This is the part II code to extract data related to Coronavirus published by
World Health Organization(WHO).The WHO publishes PDF version of situation reports to
update the international community about the current status of Covid-19 around the globe.
Two libraries used here to scrape data from PDF documents were tabula and PyPDF2.
This code covers the 39th report till the current date report. It will be updated every week
to include the new reports.
The detail description of the code can be found in:
https://github.com/HodaMYoung/Covid19/WHO1_38.py


Source:
https://www.who.int/emergencies/diseases/novel-coronavirus-2019/situation-reports"""

#importing libraries
import pandas as pd
import numpy as np
import tabula
import PyPDF2
import re

s0,s1=39,155
colrN=['Country','Total Cases','New Cases','Total Deaths','New Deaths',\
       'Transmission','Updated','First Case Date','Report Date','Last Case Date']
NMS=['Territory','Unnamed: 0','Territories**','International','Territories*','Reporting Country/',\
     'Territoriesii','Subtotal for all regions','Reporting Country/ Territory/Area']
dfr=pd.DataFrame({'P0':[3,3,3,3,2,2,4,3,2,2,3,4,3,3,3,2,2,'NA','NA','NA','NA','NA',
                        'NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA',\
                        'NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA',\
                        'NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA',\
                        'NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA',\
                        'NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA',\
                        'NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA',\
                        'NA','NA','NA'],\
                  'A0':[(150,0,690,600),(155,0,690,600),(155,0,690,600),\
                        (155,0,690,600),(155,0,690,600),(155,0,690,600),\
                        (150,0,690,600),(150,0,690,600),(150,0,690,600),\
                        (150,0,690,600),(155,0,690,600),(180,0,720,600),\
                        (155,0,700,600),(155,0,700,600),(155,0,700,600),\
                        (155,0,700,600),(155,0,700,600),'NA','NA','NA','NA','NA',\
                        'NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA',\
                        'NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA',\
                        'NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA',\
                        'NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA',\
                        'NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA',\
                        'NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA','NA',\
                        'NA','NA','NA'],\
                  'P1':[[4,5],[4,5],[4,5],[4,5,5],[[3,4],4],\
                        [[3,4],4],[5,6,6],[4,5,6,6],\
                        [3,4,5,5],[3,4,5,5],[4,5,6,6],\
                        [5,6,7,7],[4,5,6,6],[4,5,6,6],
                        [4,5,5,5,6,6],[3,4,5,5,5],[3,4,5,6,6],
                        [3,4,5,6,6],[3,4,5,6,6,6],[3,4,5,6,6,6],\
                        [4,5,6,7,7,7],[2,3,4,5,5,5],\
                        [2,3,4,5,5,5],[2,3,4,5,5,6],[2,3,4,5,6,6],\
                        [3,4,5,6,7,7],[4,5,6,7,8,8],[3,4,5,6,7],\
                        [4,5,6,7,8],[2,3,4,5,6,6],[2,3,4,5,6,6],\
                        [2,3,4,5,6,6],[3,4,5,6,7,7],[4,5,6,7,8,8,8],\
                        [4,5,6,7,8,8],[3,4,5,6,7,7],[2,3,4,5,6,6],\
                        [2,3,4,5,6,6],[2,3,4,5,6,6],[3,4,5,6,7,8],\
                        [4,5,6,7,8,9],[3,4,5,6,7,8,8],\
                        [2,3,4,5,6,7,7],[4,5,6,7,8,9,9],[2,3,4,5,6,7,7],\
                        [2,3,4,5,6,7,7],[3,4,5,6,7,8,8],[4,5,6,7,8,9,9],[3,4,5,6,7,8,8],\
                        [3,4,5,6,7,8,8],[4,5,6,7,8,9,9],[2,3,4,5,6,7,7],[5,6,7,8,9,10,10],\
                        [3,4,5,6,7,8,8],[5,6,7,8,9,10,10],[3,4,5,6,7,8,8],\
                        [3,4,5,6,7,8,8],[2,3,4,5,6,7,7],[2,3,4,5,6,7,7],[4,5,6,7,8,9,9],\
                        [3,4,5,6,7,8,8],[4,5,6,7,8,9,9],[3,4,5,6,7,8,8],\
                        [5,6,7,8,8,9,10,11,12,13,14],[4,5,6,7,7,8,9,10,11,12,13],\
                        [4,5,6,7,7,8,9,10,11,12,13],[6,7,8,9,9,10,11,12,13,14,15],\
                        [5,6,7,8,8,9,10,11,12,13,14],[5,6,7,8,8,9,10,11,12,13,14],\
                        [5,6,7,8,8,9,10,11,12,13,14],[6,7,8,9,9,10,11,12,13,14,15],\
                        [4,5,6,7,7,8,9,10,11,12,13],[4,5,6,7,7,8,9,10,11,12,13],\
                        [6,7,8,9,9,10,11,12,13,14,15],[5,6,7,8,8,9,10,11,12,13,14],\
                        [5,6,7,8,8,9,10,11,12,13,14,14],[7,8,9,10,10,11,12,13,14,15,16,16],\
                        [5,6,7,8,8,9,10,11,12,13,14,14],[4,5,6,7,7,8,9,10,11,12,13,13],\
                        [4,5,6,7,7,8,9,10,11,12,13,13],[6,7,8,9,9,10,11,12,13,14,15,15],\
                        [4,5,6,7,7,8,9,10,11,12,13,13],[6,7,8,9,9,10,11,12,13,14,15,16,16],\
                        [4,5,6,7,7,8,9,10,11,12,13,14,14],[5,6,7,8,8,9,10,11,12,13,14,15],\
                        [4,5,6,7,7,8,9,10,11,12,13,14],[4,5,6,7,7,8,9,10,11,12,13,14],\
                        [4,5,6,7,7,8,9,10,11,12,13,14],[5,6,7,8,9,10,11,12,13,14],\
                        [6,7,8,9,10,11,12,13,14,15],[5,6,7,8,9,10,11,12,13,14],\
                        [5,6,7,8,9,10,11,12,13,14],[5,6,7,8,9,10,11,12,13,14],\
                        [4,5,6,7,8,9,10,11,12,13],[6,7,8,9,10,11,12,13,14,15],\
                        [5,6,7,8,9,10,11,12,13,14],[6,7,8,9,10,11,12,13,14,15],\
                        [4,5,6,7,8,9,10,11,12,13],[5,6,7,8,9,10,11,12,13,14],\
                        [5,6,7,8,9,10,11,12,13,14],[4,5,6,7,8,9,10,11,12,13],\
                        [5,6,7,8,9,10,11,12,13,14],[3,4,5,6,7,8,9,10,11,12],\
                        [4,5,6,7,8,9,10,11,12,13],[7,8,9,10,11,12,13,14,15,16],\
                        [4,5,6,7,8,9,10,11,12,13],[4,5,6,7,8,9,10,11,12,13],\
                        [5,6,7,8,9,10,11,12,13,14],[6,7,8,9,10,11,12,13,14,15],\
                        [6,7,8,9,10,11,12,13,14,15],[6,7,8,9,10,11,12,13,14,15],\
                        [6,7,8,9,10,11,12,13,14,15],[5,6,7,8,9,10,11,12,13,14],\
                        [4,5,6,7,8,9,10,11,12,13],[4,5,6,7,8,9,10,11,12,13],\
                        [4,5,6,7,8,9,10,11,12,13]],\
                  'A1':[[(100,0,800,900),(0,0,190,900)],\
                        [(100,0,800,900),(0,0,225,900)],\
                        [(100,0,800,900),(0,0,300,900)],\
                        [(120,0,800,900),(0,0,380,900),(400,0,435,900)],\
                        [[(120,0,800,900),(0,0,500,900)],(520,0,545,900)],\
                        [[(120,0,800,900),(0,0,560,900)],(580,0,615,900)],\
                        [(120,0,800,900),(0,0,750,900),(750,0,805,900)],\
                        [(120,0,800,900),(0,0,800,900),(0,0,60,900),(80,0,120,900)],\
                        [(120,0,800,900),(0,0,800,900),(0,0,130,900),(155,0,190,900)],\
                        [(120,0,800,900),(0,0,800,900),(0,0,250,900),(270,0,300,900)],\
                        [(120,0,800,900),(60,0,800,900),(0,0,290,900),(310,0,340,900)],\
                        [(120,0,800,900),(0,0,800,900),(0,0,360,900),(380,0,410,900)],\
                        [(120,0,800,900),(0,0,800,900),(0,0,440,900),(460,0,490,900)],\
                        [(120,0,800,900),(0,0,800,900),(0,0,500,900),(520,0,550,900)],\
                        [(120,0,800,900),(0,0,500,900),(480,0,510,900),(510,0,800,900),\
                         (0,0,590,900),(610,0,640,900)],\
                        [(120,0,810,900),(0,0,800,900),(0,0,715,900),(710,0,750,900),(755,0,800,900)],\
                        [(120,0,810,900),(0,0,800,900),(60,0,800,900),\
                         (0,0,130,900),(160,0,190,900)],\
                        [(120,0,810,900),(0,0,800,900),(0,0,800,900),\
                         (0,0,270,900),(300,0,330,900)],\
                        [(120,0,810,900),(0,0,800,900),(0,0,800,900),\
                         (0,0,380,900),(380,0,410,900),(430,0,460,900)],\
                        [(120,0,810,900),(0,0,800,900),(0,0,800,900),\
                         (0,0,390,900),(380,0,420,900),(440,0,480,900)],\
                        [(120,0,810,900),(0,0,800,900),(0,0,800,900),\
                         (0,0,500,900),(490,0,535,900),(560,0,590,900)],\
                        [(120,0,810,900),(0,0,800,900),(0,0,800,900),\
                         (0,0,610,900),(600,0,640,900),(670,0,705,900)],\
                        [(150,0,810,900),(0,0,800,900),(0,0,800,900),\
                         (0,0,700,900),(710,0,740,900),(770,0,790,900)],\
                        [(150,0,810,900),(0,0,800,900),(0,0,800,900),\
                         (0,0,750,900),(750,0,780,900),(60,0,90,900)],\
                        [(150,0,810,900),(0,0,800,900),(0,0,800,900),\
                         (0,0,800,900),(0,0,100,900),(115,0,145,900)],\
                        [(150,0,810,900),(0,0,800,900),(0,0,800,900),\
                         (60,0,800,900),(0,0,170,900),(180,0,210,900)],\
                        [(150,0,810,900),(0,0,800,900),(0,0,800,900),\
                         (0,0,800,900),(0,0,200,900),(230,0,260,900)],\
                        [(150,0,810,900),(0,0,800,900),(0,0,800,900),\
                         (0,0,800,900),(0,0,300,900)],\
                        [(150,0,810,900),(0,0,800,900),(0,0,800,900),\
                         (0,0,800,900),(0,0,340,900)],\
                        [(150,0,810,900),(0,0,800,900),(0,0,800,900),\
                         (0,0,800,900),(0,0,250,900),(220,0,320,800)],\
                        [(150,0,810,900),(0,0,800,900),(0,0,800,900),\
                         (0,0,800,900),(0,0,300,900),(290,0,390,800)],\
                        [(150,0,810,900),(0,0,800,900),(0,0,800,900),\
                         (0,0,800,900),(60,0,310,900),(310,0,420,800)],\
                        [(170,0,810,900),(0,0,800,900),(0,0,800,900),\
                         (0,0,800,900),(0,0,320,900),(310,0,410,800)],\
                        [(180,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,630,900),(630,0,680,800),\
                         (690,0,720,900)],\
                        [(170,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,630,900),(620,0,720,800)],\
                        [(170,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,700,900),(710,0,740,800)],\
                        [(170,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,720,900),(740,0,770,800)],\
                        [(170,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,750,900),(775,0,795,800)],\
                        [(170,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,770,900),(775,0,820,800)],\
                        [(170,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,800,900),(60,0,90,800)],\
                        [(170,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,810,900),(70,0,100,800)],\
                        [(170,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,300,900),(320,0,360,800)],\
                        [(170,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,300,900),(320,0,360,800)],\
                        [(170,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,300,900),(320,0,360,800)],\
                        [(170,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,300,900),(320,0,360,800)],\
                        [(170,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,350,900),(370,0,410,800)],\
                        [(170,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,370,900),(390,0,420,800)],\
                        [(170,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,350,900),(370,0,410,800)],\
                        [(170,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,350,900),(370,0,410,800)],\
                        [(170,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,350,900),(360,0,420,800)],\
                        [(170,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,350,900),(370,0,410,800)],\
                        [(180,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,390,900),(410,0,440,800)],\
                        [(180,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,390,900),(410,0,440,800)],\
                        [(180,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,430,900),(450,0,480,800)],\
                        [(170,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,510,900),(530,0,560,800)],\
                        [(180,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,620,900),(630,0,660,800)],\
                        [(180,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,620,900),(630,0,660,800)],\
                        [(180,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,620,900),(630,0,660,800)],\
                        [(180,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,620,900),(630,0,660,800)],\
                        [(180,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,620,900),(630,0,660,800)],\
                        [(180,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,660,900),(680,0,710,800)],\
                        [(180,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,660,900),(680,0,710,800)],\
                        [(180,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,660,900),(680,0,710,800)],\
                        [(120,0,810,900),(80,0,810,900),(50,0,810,900),(80,0,440,900),\
                         (440,0,540,900),(50,0,560,900),(50,0,560,900),(50,0,560,900),\
                         (50,0,560,900),(50,0,560,900),(50,0,460,900)],\
                        [(120,0,810,900),(50,0,810,900),(50,0,810,900),(80,0,440,900),\
                         (440,0,540,900),(50,0,560,900),(50,0,560,900),(50,0,560,900),\
                         (50,0,560,900),(50,0,560,900),(50,0,460,900)],\
                        [(120,0,810,900),(50,0,810,900),(50,0,810,900),(80,0,440,900),\
                         (440,0,540,900),(50,0,560,900),(50,0,560,900),(50,0,560,900),\
                         (50,0,560,900),(50,0,560,900),(50,0,460,900)],\
                        [(120,0,810,900),(50,0,810,900),(50,0,810,900),(80,0,440,900),\
                         (440,0,540,900),(50,0,560,900),(50,0,560,900),(50,0,560,900),\
                         (50,0,560,900),(50,0,560,900),(50,0,480,900)],\
                        [(120,0,810,900),(50,0,810,900),(50,0,810,900),(80,0,440,900),\
                         (440,0,540,900),(50,0,560,900),(50,0,560,900),(50,0,560,900),\
                         (50,0,560,900),(50,0,560,900),(50,0,480,900)],\
                        [(120,0,810,900),(50,0,810,900),(50,0,810,900),(80,0,440,900),\
                         (440,0,540,900),(50,0,560,900),(50,0,560,900),(50,0,560,900),\
                         (50,0,560,900),(50,0,560,900),(50,0,480,900)],\
                        [(120,0,810,900),(50,0,810,900),(50,0,810,900),(80,0,440,900),\
                         (440,0,540,900),(50,0,560,900),(50,0,560,900),(50,0,560,900),\
                         (50,0,560,900),(50,0,560,900),(50,0,480,900)],\
                        [(120,0,810,900),(50,0,810,900),(50,0,810,900),(80,0,440,900),\
                         (440,0,540,900),(50,0,560,900),(50,0,560,900),(50,0,560,900),\
                         (50,0,560,900),(50,0,560,900),(50,0,480,900)],\
                        [(120,0,810,900),(50,0,810,900),(50,0,810,900),(80,0,440,900),\
                         (440,0,540,900),(50,0,560,900),(50,0,560,900),(50,0,560,900),\
                         (50,0,560,900),(50,0,560,900),(50,0,480,900)],\
                        [(120,0,810,900),(50,0,810,900),(50,0,810,900),(80,0,440,900),\
                         (440,0,540,900),(50,0,560,900),(50,0,560,900),(50,0,560,900),\
                         (50,0,560,900),(50,0,560,900),(50,0,480,900)],\
                        [(120,0,810,900),(50,0,810,900),(50,0,810,900),(80,0,440,900),\
                         (440,0,540,900),(50,0,560,900),(50,0,560,900),(50,0,560,900),\
                         (50,0,560,900),(50,0,560,900),(50,0,480,900)],\
                        [(120,0,810,900),(50,0,810,900),(50,0,810,900),(80,0,440,900),\
                         (440,0,540,900),(50,0,560,900),(50,0,560,900),(50,0,560,900),\
                         (50,0,560,900),(50,0,560,900),(50,0,480,900)],\
                        [(120,0,810,900),(50,0,810,900),(50,0,810,900),(80,0,420,900),\
                         (440,0,560,900),(50,0,560,900),(50,0,560,900),(50,0,560,900),\
                         (50,0,560,900),(50,0,560,900),(50,0,340,900),(320, 0, 380, 900)],\
                        [(120,0,810,900),(50,0,810,900),(50,0,810,900),(80,0,440,900),\
                         (440,0,560,900),(50,0,560,900),(50,0,560,900),(50,0,560,900),\
                         (50,0,560,900),(50,0,560,900),(50,0,360,900),(360, 0, 385, 900)],\
                        [(120,0,810,900),(50,0,810,900),(50,0,810,900),(80,0,440,900),\
                         (440,0,560,900),(50,0,560,900),(50,0,560,900),(50,0,560,900),\
                         (50,0,560,900),(50,0,560,900),(50,0,360,900),(360, 0, 385, 900)],\
                        [(140,0,810,900),(50,0,810,900),(50,0,810,900),(80,0,440,900),\
                         (440,0,560,900),(50,0,560,900),(50,0,560,900),(50,0,560,900),\
                         (50,0,560,900),(50,0,560,900),(50,0,360,900),(360, 0, 385, 900)],\
                        [(120,0,810,900),(50,0,810,900),(50,0,810,900),(80,0,440,900),\
                         (440,0,560,900),(50,0,560,900),(50,0,560,900),(50,0,560,900),\
                         (50,0,560,900),(50,0,560,900),(50,0,360,900),(360, 0, 390, 900)],\
                        [(120,0,810,900),(80,0,810,900),(50,0,810,900),(80,0,440,900),\
                         (440,0,560,900),(80,0,560,900),(50,0,560,900),(80,0,560,900),\
                         (0,0,810,900),(50,0,560,900),(50,0,350,900),(360, 0, 390, 900)],\
                        [(120,0,810,900),(80,0,810,900),(50,0,810,900),(80,0,440,900),\
                         (440,0,560,900),(80,0,560,900),(50,0,560,900),(80,0,560,900),\
                         (0,0,810,900),(50,0,560,900),(50,0,350,900),(360, 0, 390, 900)],\
                        [(140,0,810,900),(80,0,810,900),(50,0,810,900),(80,0,510,900),\
                         (510,0,560,900),(50,0,560,900),(50,0,560,900),(80,0,560,900),\
                         (50,0,810,900),(50,0,560,900),(50,0,560,900),(50,0,120,900),(130, 0, 150, 900)],\
                        [(120,0,810,900),(80,0,810,900),(50,0,810,900),(80,0,510,900),\
                         (510,0,560,900),(50,0,560,900),(50,0,560,900),(80,0,560,900),\
                         (50,0,810,900),(50,0,560,900),(50,0,560,900),(50,0,160,900),(160, 0, 190, 900)],\
                        [(140,0,810,900),(80,0,810,900),(50,0,810,900),(80,0,510,900),\
                         (510,0,560,900),(50,0,560,900),(50,0,560,900),(80,0,560,900),\
                         (50,0,810,900),(50,0,560,900),(50,0,560,900),(50,0,160,900)],\
                        [(120,0,810,900),(80,0,810,900),(50,0,810,900),(80,0,510,900),\
                         (510,0,560,900),(50,0,560,900),(50,0,560,900),(80,0,560,900),\
                         (50,0,810,900),(50,0,560,900),(50,0,560,900),(50,0,200,900)],\
                        [(120,0,810,900),(80,0,810,900),(50,0,810,900),(80,0,510,900),\
                         (510,0,560,900),(50,0,560,900),(50,0,560,900),(80,0,560,900),\
                         (50,0,810,900),(50,0,560,900),(50,0,560,900),(50,0,200,900)],\
                        [(140,0,810,900),(80,0,810,900),(50,0,810,900),(80,0,510,900),\
                         (510,0,560,900),(50,0,560,900),(50,0,560,900),(80,0,560,900),\
                         (50,0,810,900),(50,0,560,900),(50,0,560,900),(50,0,200,900)],\
                        [(120,0,810,900),(80,0,810,900),(0,0,810,900),(0,0,550,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,480,900)],\
                        [(120,0,810,900),(80,0,810,900),(0,0,810,900),(0,0,550,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,460,900)],\
                        [(120,0,810,900),(80,0,810,900),(0,0,810,900),(0,0,550,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,460,900)],\
                        [(120,0,810,900),(80,0,810,900),(0,0,810,900),(0,0,550,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,460,900)],\
                        [(120,0,810,900),(80,0,810,900),(0,0,810,900),(0,0,550,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,460,900)],\
                        [(120,0,810,900),(80,0,810,900),(0,0,810,900),(0,0,550,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,460,900)],\
                        [(120,0,810,900),(80,0,810,900),(0,0,810,900),(0,0,550,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,460,900)],\
                        [(120,0,810,900),(80,0,810,900),(0,0,810,900),(0,0,550,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,460,900)],\
                        [(120,0,810,900),(80,0,810,900),(0,0,810,900),(0,0,550,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,460,900)],\
                        [(120,0,810,900),(80,0,810,900),(0,0,810,900),(0,0,550,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,460,900)],\
                        [(120,0,810,900),(80,0,810,900),(0,0,810,900),(0,0,550,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,460,900)],\
                        [(120,0,810,900),(80,0,810,900),(0,0,810,900),(0,0,550,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,460,900)],\
                        [(120,0,810,900),(80,0,810,900),(0,0,810,900),(0,0,550,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,460,900)],\
                        [(120,0,810,900),(80,0,810,900),(0,0,810,900),(0,0,550,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,460,900)],\
                        [(120,0,810,900),(80,0,810,900),(0,0,810,900),(0,0,550,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,460,900)],\
                        [(120,0,810,900),(80,0,810,900),(0,0,810,900),(0,0,550,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,460,900)],\
                        [(120,0,810,900),(80,0,810,900),(0,0,810,900),(0,0,550,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,460,900)],\
                        [(120,0,810,900),(80,0,810,900),(0,0,810,900),(0,0,550,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,460,900)],\
                        [(120,0,810,900),(80,0,810,900),(0,0,810,900),(0,0,550,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,460,900)],\
                        [(120,0,810,900),(80,0,810,900),(0,0,810,900),(0,0,550,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,460,900)],\
                        [(120,0,810,900),(80,0,810,900),(0,0,810,900),(0,0,550,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,460,900)],\
                        [(120,0,810,900),(80,0,810,900),(0,0,810,900),(0,0,550,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,460,900)],\
                        [(120,0,810,900),(80,0,810,900),(0,0,810,900),(0,0,550,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,460,900)],\
                        [(120,0,810,900),(80,0,810,900),(0,0,810,900),(0,0,550,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,460,900)],\
                        [(120,0,810,900),(80,0,810,900),(0,0,810,900),(0,0,550,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,460,900)],\
                        [(110,0,810,900),(80,0,810,900),(0,0,810,900),(0,0,550,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,460,900)],\
                        [(120,0,810,900),(80,0,810,900),(0,0,810,900),(0,0,550,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,460,900)],\
                        [(110,0,810,900),(80,0,810,900),(0,0,810,900),(0,0,550,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,810,900),\
                         (0,0,810,900),(0,0,810,900),(0,0,460,900)]]})

ncn=[8,1,7,6,6,4,3,4,2,3,2,0,1,0,0,3,0,1,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\
     0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\
     0,0,0,0,0,0,0,0,0,0,0,0,0]
pathb='/Users/Hoda/Documents/Covid19/WHO/Reports/covid-19_r'
pathr='/Users/Hoda/Documents/Covid19/WHO/csv_files/CRWHO'
paths=pathr
#main part
for n in range(s0,s1):
    m=n-39
    pathR=pathr+str(n-1)+'.csv'
    df0=pd.read_csv(pathR)
    df0.drop(columns=['Unnamed: 0'],inplace=True)
    p0,a0=dfr.loc[m,'P0'],dfr.loc[m,'A0']
    p1,a1=dfr.loc[m,'P1'],dfr.loc[m,'A1']
    path=pathb+str(n)+'.pdf'
    pdfFileObj = open(path, 'rb')
    pdfReader = PyPDF2.PdfFileReader(pdfFileObj)
    page=pdfReader.getPage(0)
    cl=page.extractText()
    cl=cl.replace('\n','')
    if n<79:
       expression,ewdth='CET ',16
    elif n<87:
       expression,ewdth='CET,',16
    elif n<102:
        expression,ewdth='CEST,',16
    elif n<133:
        expression,ewdth='CEST,',12
    else:
        expression,ewdth='CEST,',13
        
    clndxD=cl.find(expression)
    cl1=cl[clndxD+len(expression):clndxD+len(expression)+ewdth]
    cl1=cl1.split()
    if n>59 and n<63:
           cl1[0]=str(int(cl1[0])+1)
    cl1=[x.capitalize() for x in cl1]
    cl1=('-').join(cl1)
    if n>56:
       cl2=ncn[n-57]+len(df0)     
    else: 
        clndx0=cl.find('Countries')
        clndx1=cl.find('countries')
        if clndx1*clndx0<0:
           clndxN=max([clndx0,clndx1])
        else:
           clndxN=min([clndx0,clndx1])
        cl2=cl[clndxN-4:clndxN]
    p0=str(p0)
    if p0!='NA':
       df_t1N=tabula.read_pdf(path,pages=p0,area=a0)
       df_t1N.columns=['Province','Population(in 10,000s)','Daily Confirmed',\
                    'Daily Cases','Daily Deaths',\
                    'Total Cases','Total Deaths']
       df_t1N.replace(' ','',regex=True,inplace=True)
       df_t1N.replace('-','0',regex=True,inplace=True)
       clmns=df_t1N.columns
       for t1 in range(0,len(clmns)): 
           df_t1N[clmns[t1]]=list(map(str,df_t1N[clmns[t1]]))
           df_t1N[clmns[t1]]=[x[0:len(x)-1] if x[-1]=='*' else x \
                              for x in df_t1N[clmns[t1]]]
           if t1!=0:      
              df_t1N[clmns[t1]]=list(map(int,df_t1N[clmns[t1]]))
       
       df_t1=df_t1N[['Province','Total Cases']]
       pathtN=paths+str(n)+'_tableN.csv'
       patht1=paths+str(n)+'_T1.csv'
       df_t1N.to_csv(pathtN)
       df_t1.to_csv(patht1)

    if n<42:
       dfr0=pd.DataFrame({'Country':['China'],\
                          'Cases':[str(df_t1N['Total Cases'].sum())+' ('+\
                                   str(df_t1N['Daily Confirmed'].sum())+')'],\
                          'Deaths':[str(df_t1N['Total Deaths'].sum())+\
                                    ' ('+str(df_t1N['Daily Deaths'].sum())+')'],\
                          'Transmission':['Local transmission'],\
                          'Last Case Date':[0]})
       dfM=pd.DataFrame(columns=['Country','Cases','Deaths',\
                                 'Transmission','Last Case Date'])
       for prt in range(0,len(p1)):
           dfb=tabula.read_pdf(path,pages=str(p1[prt]),area=a1[prt])
        
           if len(dfb.columns)>5:
              if len(p1)==1:
                 dfb.dropna(thresh=int(cl2),axis=1,inplace=True)
              else:
                 dfbc=pd.DataFrame(dfb.describe(include='all'))
                 sdfbc=sorted(dfbc.iloc[0,:])
                 sdfbc=filter(lambda x: x>0,sdfbc)
                 sdfbc=list(sdfbc)
                 thr=min(sdfbc)
                 dfb.dropna(thresh=thr,axis=1,inplace=True)
           dfb.columns=['Country','Cases','Deaths','Transmission','Last Case Date']
           ndxnm=dfb[dfb['Country']=='International conveyance'].index.to_list()
           if len(ndxnm)>0:
              dftf=pd.DataFrame(dfb.iloc[ndxnm[0],:].isnull())
              dfTF=dftf.transpose()
              dfTF.reset_index(drop=True,inplace=True)
              for tf in range(0,5):
                  if int(dfTF.iloc[0,tf])==0:
                     M=dfb.iloc[ndxnm[0],tf]
                     dfb.iloc[ndxnm[0]+1,tf]=M

           dfb.dropna(inplace=True)
           dfb.reset_index(drop=True,inplace=True)
           dfM=pd.concat([dfM,dfb],axis=0)
       df=pd.concat([dfr0,dfM],axis=0)
       CLMNS=df.columns
       df.dropna(inplace=True)
       df.reset_index(drop=True,inplace=True)
       for Nc in range(1,3):
           df[CLMNS[Nc]]=list(map(str,df[CLMNS[Nc]]))
           df[CLMNS[Nc]]=[x[0:len(x)-2] if x[-1]=='*' else x for \
                          x in df[CLMNS[Nc]]]
           ns=df[CLMNS[Nc]].str.split('(', n=1, expand=True)
           df[str(Nc+5)]=ns[0]
           df[str(Nc+5)]=[x[0:len(x)-2] if x[-1]=='*' else x for \
                          x in df[str(Nc+5)]]
           df[str(Nc+5)]=list(map(int,df[str(Nc+5)]))
           df[str(Nc+10)]=ns[1]
           df[str(Nc+10)]=[x[0:len(x)-2] if x[-1]=='*' else x for \
                           x in df[str(Nc+10)]]
           df[str(Nc+10)]=[x[0:len(x)-1] if x[-1]==')' else x for \
                           x in df[str(Nc+10)]]
           df[str(Nc+10)]=list(map(int,df[str(Nc+10)]))

       df.drop(columns=[CLMNS[1],CLMNS[2]],inplace=True)
       df.fillna(0,inplace=True)
       df.columns=['Country','Transmission','Last Case Date',\
                'Total Cases','New Cases',\
                'Total Deaths', 'New Deaths']
   
    elif n<56:
        
       dfr0=pd.DataFrame({'Country':['China'],\
                          'Total Cases':[str(df_t1N['Total Cases'].sum())],\
                          'New Cases':[str(df_t1N['Daily Confirmed'].sum())],\
                          'Total Deaths':[str(df_t1N['Total Deaths'].sum())],\
                          'New Deaths':[str(df_t1N['Daily Deaths'].sum())],\
                          'Transmission':['Local transmission'],\
                          'Last Case Date':[0]})
       dfM=pd.DataFrame(columns=['Country','Total Cases','New Cases',\
                                 'Total Deaths','New Deaths',\
                                 'Transmission','Last Case Date'])
       for prt in range(0,len(p1)):
           if str(type(p1[prt]))=="<class 'list'>":
              dfb=tabula.read_pdf(path,pages=p1[prt],area=a1[prt])
           else:
               dfb=tabula.read_pdf(path,pages=str(p1[prt]),area=a1[prt])

           if len(dfb.columns)>7:
              if len(p1)==1:
                 dfb.dropna(thresh=int(cl2),axis=1,inplace=True)
              else:
                 dfbc=pd.DataFrame(dfb.describe(include='all'))
                 sdfbc=sorted(dfbc.iloc[0,:])
                 sdfbc=filter(lambda x: x>0,sdfbc)
                 sdfbc=list(sdfbc)
                 thr=min(sdfbc)
                 dfb.dropna(thresh=thr,axis=1,inplace=True)
           clmns_check=dfb.columns
           #r0=list(filter(lambda x:clmns_check[0] in x, names))
           r0=list(filter(lambda x:clmns_check[0] in x, NMS))
           #if len(r0)>0:
           if len(r0)==0:
              dfR0=pd.DataFrame(clmns_check).transpose()
              dfb.columns=dfR0.columns
              dfb=pd.concat([dfR0,dfb],axis=0)
              
               
           dfb.columns=['Country','Total Cases','New Cases',\
                        'Total Deaths','New Deaths',\
                        'Transmission','Last Case Date']
           dfb.dropna(inplace=True)
           dfb.reset_index(drop=True,inplace=True)
           dfM=pd.concat([dfM,dfb],axis=0)
       df=pd.concat([dfr0,dfM],axis=0)
       df.dropna(inplace=True)
       df.reset_index(drop=True,inplace=True)
    else:
        
       dfM=pd.DataFrame(columns=['Country','Total Cases','New Cases',\
                                 'Total Deaths','New Deaths',\
                                 'Transmission','Last Case Date'])
       for prt in range(0,len(p1)):
           dfb=tabula.read_pdf(path,pages=str(p1[prt]),area=a1[prt])
           clmn_dfb=dfb.columns
           dfb[clmn_dfb[5]].fillna('NA',inplace=True)
           if n==56 and prt==3:
               ndxcar=dfb[dfb['Nigeria']=='Central African'].index.to_list()
               dfb.iloc[ndxcar[0]+1,0]=dfb.iloc[ndxcar[0],0]+' '+\
                                        dfb.iloc[ndxcar[0]+2,0]
           if n==61 and prt==5:
              dfb.iloc[0,0]='Diamond Princess'
           if n==70 and prt==3:
              dfb.iloc[-1,0]='United Republic of Tanzania'
           if n==76 and prt==5:
              dfb.iloc[-1,0]='Diamond Princess'
           if n==94 and prt==0:
              ndxlaos=dfb[dfb['Unnamed: 0']=='Democratic Republic'].index.to_list()
              dfb.iloc[ndxlaos[0],0]='Laos'
              ndxnorthm=dfb[dfb['Unnamed: 0']=='the)'].index.to_list()
              dfb.iloc[ndxnorthm[0],0]='Northern Mariana Islands (Commonwealth of the)'
           if n>104 and n<110 and prt==9:
              ndxksv=dfb[dfb['Reporting Country/']=='Kosovo[1]'].index.to_list()
              dfb.iloc[ndxksv[0]+1,0]='Kosovo[1]'
           if n==115 and prt==11:
              dfb=pd.DataFrame(dfb.columns)
              dfb=dfb.transpose()
              dfb.columns=['Reporting Country/','col1','col2','col3','col4','col5','col6']
           if n==127 and prt==9:
              ndxPrinceDiamond=dfb[dfb['Reporting Country/ Territory/Area']=='Other*']\
                                .index.to_list()
              dfb.iloc[ndxPrinceDiamond[0],0]='Diamond Princess'
              ndxFP=dfb[dfb['Reporting Country/ Territory/Area']=='French Polynesia']\
                                .index.to_list()
              dfb.iloc[ndxFP[0]-1,0]='French Polynesia'
           if (n==127 and prt==9) or (n==137 and prt==9) or (n>141 and n<146 and prt==9) or (n>147 and n<151 and prt==9)\
              or (n==153 and prt==9):
              ndxCW=dfb[dfb['Reporting Country/ Territory/Area']=='Northern Mariana Islands']\
                                .index.to_list()
              dfb.iloc[ndxCW[0],0]='Northern Mariana Islands (Commonwealth of the)'
           if (n>141 and n<146 and prt==9) or (n>147 and n<151 and prt==9) or (n==153 and prt==9):
              ndxFP=dfb[dfb['Reporting Country/ Territory/Area']=='French Polynesia']\
                                .index.to_list()
              dfb.iloc[ndxFP[0]-1,0]='French Polynesia'
           if n>146 and prt==1:
              ndxSTP=dfb[dfb['Niger'].str.contains('Sao Tome')].index.to_list()
              dfb.iloc[ndxSTP[0],0]='São Tomé and Príncipe'
           if n==151 and prt==7:
              ndxKSV=dfb[dfb['Reporting Country/ Territory/Area']=='Kosovo[1]'].index.to_list()
              dfb.iloc[ndxKSV[0]+1,0]='Kosovo[1]'
           if len(dfb.columns)>7:
              if len(p1)==1:
                 dfb.dropna(thresh=int(cl2),axis=1,inplace=True)
              else:
                 dfbc=pd.DataFrame(dfb.describe(include='all'))
                 sdfbc=sorted(dfbc.iloc[0,:])
                 sdfbc=filter(lambda x: x>0,sdfbc)
                 sdfbc=list(sdfbc)
                 thr=min(sdfbc)
                 dfb.dropna(thresh=thr,axis=1,inplace=True)
           clmns_check=dfb.columns
           #r0=list(filter(lambda x:clmns_check[0] in x, names))
           r0=list(filter(lambda x:clmns_check[0] in x, NMS))
           if len(r0)==0:
           #if len(r0)>0:
              dfR0=pd.DataFrame(clmns_check).transpose()
              dfb.columns=dfR0.columns
              dfb=pd.concat([dfR0,dfb],axis=0)
           dfb.columns=['Country','Total Cases','New Cases','Total Deaths','New Deaths',\
                         'Transmission','Last Case Date']

           dfb.dropna(inplace=True)
           dfb.reset_index(drop=True,inplace=True)
           dfM=pd.concat([dfM,dfb],axis=0)
        
       df=dfM

    df.reset_index(drop=True,inplace=True)
    df.replace('\r',' ',regex=True,inplace=True)
    df.replace('the United Kingdom','United Kingdom',regex=True,inplace=True)
    df.replace('The United Kingdom','United Kingdom',regex=True,inplace =True)
    df.replace('Common- wealth','Commonwealth',regex=True,inplace =True)
    ndxm=df[df['Country']=='America'].index.to_list()
    if len(ndxm)>0:
       df.loc[ndxm[0],'Country']='United States of America'
       
    ndxsvg=df[df['Country']=='Saint Vincent and the'].index.to_list()
    if len(ndxsvg)>0:
       df.loc[ndxsvg[0],'Country']='Saint Vincent and the Grenadines'

    df.replace('the United States','United States of America'\
               ,regex=True,inplace =True)
    df.replace('Cote d Ivoire','Côte d’Ivoire'\
               ,regex=True,inplace =True)
    df.replace('Cote d’Ivoire','Côte d’Ivoire'\
               ,regex=True,inplace =True)
    df.replace('occupied Palestinian territory','Occupied Palestinian Territory'\
               ,regex=True,inplace =True)
    df.replace('occupied Palestinian Territory','Occupied Palestinian Territory'\
               ,regex=True,inplace =True)
    df.replace('Curacao','Curaçao'\
               ,regex=True,inplace =True)
    df.replace('Saint Barthelemy','Saint Barthélemy'\
               ,regex=True,inplace =True)
    ndxbh=df[df['Country']=='Bosnia and'].index.to_list()
    if len(ndxbh)>0:
       df.loc[ndxbh[0],'Country']='Bosnia and Herzegovina'
    ndxlpr=df[df['Country'].str.startswith('Lao')].index.to_list()
    if len(ndxlpr)>0:
       df.loc[ndxlpr[0],'Country']='Laos'
       
    ndxus=df[df['Country']=='United States of'].index.to_list()
    if len(ndxus)>0:
       df.loc[ndxus[0],'Country']='United States of America'

    if n>101 and n<114:
       ndxcg=df[df['Country']=='Congo'].index.to_list()
       df.loc[ndxcg[0],'Country']='Democratic Republic of the Congo'
       ndxvn=df[df['Country']=='of)'].index.to_list()
       df.loc[ndxvn[0],'Country']='Venezuela (Bolivarian Republic of)'
       ndxSVG=df[df['Country']=='Grenadines'].index.to_list()
       df.loc[ndxSVG[0],'Country']='Saint Vincent and the Grenadines'
       ndxsb=df[df['Country']=='Saba'].index.to_list()
       df.loc[ndxsb[0],'Country']='Bonaire, Sint Eustatius and Saba'
       ndxLS=df[df['Country']=='Republic'].index.to_list()
       df.loc[ndxLS[0],'Country']='Laos'
       
    ndxnmi=df[df['Country']=='(Commonwealth of the)'].index.to_list()
    if len(ndxnmi)>0:
       df.loc[ndxnmi[0],'Country']='Northern Mariana Islands (Commonwealth of the)'  
    df.replace(['§','‡','†','¶'],['','','',''],regex=True,inplace=True)
    df['Country']=[x[0:len(x)-1] if x[-1]=='*' else x for x in \
                   df['Country']]
    df['Country']=[x[0:len(x)-2] if x[-1]=='^' else x for x in \
                   df['Country']]            
    df.dropna(inplace=True)
    df.reset_index(drop=True,inplace=True)
    df.fillna(0,inplace=True)
    df['Updated']=n
    df.iloc[-1,0]='Diamond Princess'
    df.reset_index(drop=True,inplace=True)
    dfm=df.merge(df0[['Country','First Case Date']],how='outer')
    dfm['Report Date']=cl1
    dfm['First Case Date'].fillna(cl1,inplace=True)
    df=dfm[colrN]
    df['Transmission'].fillna('Imported cases only',inplace=True)
    df['Report Date'].replace(['December', 'Janauray','February','March','April','May','June'],\
                              ['12','01','02','03','04','05','06'],regex=True,inplace=True)
    df['First Case Date'].replace(['December', 'Janauray','February','March','April','May','June'],\
                              ['12','01','02','03','04','05','06'],regex=True,inplace=True)
    numberClmns=['Total Cases','New Cases','Total Deaths','New Deaths']
    df[numberClmns].replace(' ','',regex=True,inplace=True)
    for element in numberClmns:
        df[element].replace(' ','',regex=True,inplace=True)
        df[element]=list(map(float,df[element]))
        df[element]=list(map(round,df[element]))
   
    if n==127:
       for colrn in range(1,5):
           df.iloc[-2,colrn]+=df.iloc[-1,colrn]
       df.drop(index=[df.index.values[-1]],inplace=True)
    pathS=paths+str(n)+'.csv'
    df.to_csv(pathS)        
        

    
    
